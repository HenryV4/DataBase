name: Deploy to GCE VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Знімаємо host key (щоб не було prompt про known_hosts)
      - name: Scan VM host key
        id: scan
        run: |
          KH=$(ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" 2>/dev/null)
          echo "known_hosts<<EOF" >> $GITHUB_OUTPUT
          echo "$KH" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 2) Кладемо ЗАШИФРОВАНИЙ ключ у ~/.ssh/id_ed25519 (або id_rsa — неважливо)
      - name: Install SSH key (with passphrase)
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          known_hosts: ${{ steps.scan.outputs.known_hosts }}
          name: id_ed25519               # покладемо як ~/.ssh/id_ed25519
          if_key_exists: replace

      # 3) Стартуємо ssh-agent і додаємо ключ у агент БЕЗ взаємодії
      - name: Add key to ssh-agent (non-interactive)
        env:
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          set -e
          eval "$(ssh-agent -s)"
          # askpass-скрипт, який повертає passphrase
          echo 'echo "$SSH_PASSPHRASE"' > ./askpass.sh
          chmod +x ./askpass.sh
          export SSH_ASKPASS="$PWD/askpass.sh"
          export DISPLAY=:0  # потрібно будь-яке ненульове, щоб SSH_ASKPASS спрацював
          # додаємо ключ у агент (пробуємо id_ed25519 та id_rsa на всяк випадок)
          setsid -w ssh-add ~/.ssh/id_ed25519 < /dev/null || \
          setsid -w ssh-add ~/.ssh/id_rsa     < /dev/null
          ssh-add -l

      # 4) Синхронізуємо ВМІСТ локальної папки lab5/ у каталог на ВМ
      - name: Rsync code to VM
        run: |
          rsync -az --delete \
            -e "ssh -p ${{ secrets.SSH_PORT || 22 }}" \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            ./lab5/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/DataBase/lab5/

      # 5) Деплой (залежності + рестарт flask)
      - name: Remote deploy (deps + restart)
        run: |
          ssh -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '~/deploy_lab5.sh'

      # 6) Health-check через nginx
      - name: Remote health check
        run: |
          ssh -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/health || true)
              if [ "$code" = "200" ]; then echo "Healthy"; exit 0; fi
              echo "Not ready ($i), code=$code"; sleep 2
            done
            exit 1
          '
