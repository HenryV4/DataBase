name: Deploy to GCE VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Знімаємо host key, щоб не було prompt
      - name: Scan VM host key
        id: scan
        run: |
          KH=$(ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" 2>/dev/null)
          echo "known_hosts<<EOF" >> $GITHUB_OUTPUT
          echo "$KH" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 2) Кладемо ЗАШИФРОВАНИЙ приватний ключ у ~/.ssh (пароль тримаємо в секреті)
      - name: Install SSH key (with passphrase)
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          known_hosts: ${{ steps.scan.outputs.known_hosts }}
          name: id_ed25519
          if_key_exists: replace

      # 3) Ставимо sshpass для неінтерактивного введення пароля ключа
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # 4) Rsync: синхронізуємо ВМІСТ локальної lab5/ у /home/<user>/DataBase/lab5/
      - name: Rsync code to VM
        env:
          SSHPASS: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          ssh_opts="-p ${{ secrets.SSH_PORT || 22 }} -o StrictHostKeyChecking=no"
          rsync -az --delete \
            -e "sshpass -e ssh $ssh_opts" \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            ./lab5/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/DataBase/lab5/

      # 5) Деплой-скрипт на ВМ (встановлює залежності, рестартить flask)
      - name: Remote deploy (deps + restart)
        env:
          SSHPASS: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '~/deploy_lab5.sh'

      # 6) Health-check через nginx -> gunicorn
      - name: Remote health check
        env:
          SSHPASS: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/health || true)
              if [ "$code" = "200" ]; then echo "Healthy"; exit 0; fi
              echo "Not ready ($i), code=$code"; sleep 2
            done
            exit 1
          '
