name: Deploy to GCE VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Підготуємо ~/.ssh та known_hosts
      - name: Prepare SSH dir & known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # 2) Записуємо ЗАШИФРОВАНИЙ приватний ключ у файл
      - name: Write encrypted private key
        run: |
          cat > ~/.ssh/id_ed25519 <<'EOF'
          ${{ secrets.SSH_KEY }}
          EOF
          chmod 600 ~/.ssh/id_ed25519

      # 3) РОЗШИФРОВУЄМО ключ (прибираємо passphrase)
      - name: Decrypt private key with passphrase
        env:
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          # -P: old passphrase, -N: new passphrase (порожня)
          ssh-keygen -p -P "$SSH_PASSPHRASE" -N "" -f ~/.ssh/id_ed25519
          # Перевіримо, що ключ читається без пароля
          ssh -i ~/.ssh/id_ed25519 -o BatchMode=yes -o StrictHostKeyChecking=yes -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo SSH_OK"

      # 4) Синхронізуємо ВМІСТ локальної папки lab5/ у /home/<user>/DataBase/lab5/ на ВМ
      - name: Rsync code to VM
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes -p ${{ secrets.SSH_PORT || 22 }}" \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '.env' \
            ./lab5/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/DataBase/lab5/

      # 5) Деплой-скрипт на ВМ (встановлення залежностей + рестарт flask)
      - name: Remote deploy (deps + restart)
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '~/deploy_lab5.sh'

      # 6) Health-check через nginx -> gunicorn
      - name: Remote health check
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/health || true)
              if [ "$code" = "200" ]; then echo "Healthy"; exit 0; fi
              echo "Not ready ($i), code=$code"; sleep 2
            done
            exit 1
          '
